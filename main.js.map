{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/webpack/bootstrap","webpack://mesto-project-ff/webpack/runtime/define property getters","webpack://mesto-project-ff/webpack/runtime/hasOwnProperty shorthand","webpack://mesto-project-ff/webpack/runtime/make namespace object","webpack://mesto-project-ff/./src/scripts/cards.js","webpack://mesto-project-ff/./src/scripts/modal.js","webpack://mesto-project-ff/./src/scripts/api.js","webpack://mesto-project-ff/./src/scripts/validation.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const initialCards = [\r\n    {\r\n      name: \"Архыз\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg\",\r\n    },\r\n    {\r\n      name: \"Челябинская область\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg\",\r\n    },\r\n    {\r\n      name: \"Иваново\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg\",\r\n    },\r\n    {\r\n      name: \"Камчатка\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg\",\r\n    },\r\n    {\r\n      name: \"Холмогорский район\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg\",\r\n    },\r\n    {\r\n      name: \"Байкал\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg\",\r\n    }\r\n];\r\n","/* export function openModal(modal) {\r\n  modal.classList.add('popup_is-opened');\r\n  document.addEventListener('keydown', EscClose);\r\n}\r\n\r\nexport function closeModal(modal) {\r\n  modal.classList.remove('popup_is-opened');\r\n  document.removeEventListener('keydown', EscClose);\r\n}\r\n\r\nfunction EscClose(event) {\r\n  if (event.key === 'Escape') {\r\n    const openedModal = document.querySelector('.popup_is-opened');\r\n    if (openedModal) {\r\n      closeModal(openedModal);\r\n    }\r\n  }\r\n}\r\n */\r\n\r\n\r\n// modal.js\r\n\r\n// modal.js\r\n\r\nconst popupOpenedClass = 'popup_is-opened';\r\nconst popupTransitionClass = 'popup_is-animated';\r\n\r\n// Открытие попапа\r\nexport function openModal(popup) {\r\n  popup.classList.add(popupOpenedClass);\r\n  setTimeout(() => popup.classList.add(popupTransitionClass), 10);\r\n  document.addEventListener('keydown', handleEscClose);\r\n}\r\n\r\n// Закрытие попапа\r\nexport function closeModal(popup) {\r\n  popup.classList.remove(popupTransitionClass);\r\n  setTimeout(() => popup.classList.remove(popupOpenedClass), 300);\r\n  document.removeEventListener('keydown', handleEscClose);\r\n}\r\n\r\n// Закрытие по ESC\r\nfunction handleEscClose(evt) {\r\n  if (evt.key === 'Escape') {\r\n    const openedPopup = document.querySelector(`.${popupOpenedClass}`);\r\n    if (openedPopup) closeModal(openedPopup);\r\n  }\r\n}\r\n\r\n// Закрытие по клику на оверлей или кнопку закрытия\r\nexport function setModalListeners(modal) {\r\n  modal.addEventListener('mousedown', (evt) => {\r\n    if (\r\n      evt.target.classList.contains('popup') ||\r\n      evt.target.classList.contains('popup__close')\r\n    ) {\r\n      closeModal(modal);\r\n    }\r\n  });\r\n}\r\n","// api.js\r\n/* \r\nconst config = {\r\n  baseUrl: 'https://nomoreparties.co/v1/cohort-42', // замените на свою группу\r\n  headers: {\r\n    authorization: 'c56e30dc-2883-4270-a59e-b2f7bae969c6', // замените на свой токен\r\n    'Content-Type': 'application/json'\r\n  }\r\n};\r\n\r\nconst checkResponse = res => {\r\n  if (res.ok) {\r\n    return res.json();\r\n  }\r\n  return Promise.reject(`Ошибка: ${res.status}`);\r\n};\r\n\r\nexport const getUserInfo = () => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    headers: config.headers\r\n  }).then(checkResponse);\r\n};\r\n\r\nexport const setUserInfo = (name, about) => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    method: 'PATCH',\r\n    headers: config.headers,\r\n    body: JSON.stringify({ name, about })\r\n  }).then(checkResponse);\r\n};\r\n\r\nexport const getInitialCards = () => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    headers: config.headers\r\n  }).then(checkResponse);\r\n};\r\n\r\nexport const addCard = (name, link) => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    method: 'POST',\r\n    headers: config.headers,\r\n    body: JSON.stringify({ name, link })\r\n  }).then(checkResponse);\r\n};\r\n\r\nexport const deleteCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/${cardId}`, {\r\n    method: 'DELETE',\r\n    headers: config.headers\r\n  }).then(checkResponse);\r\n};\r\n\r\nexport const likeCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: 'PUT',\r\n    headers: config.headers\r\n  }).then(checkResponse);\r\n};\r\n\r\nexport const unlikeCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: 'DELETE',\r\n    headers: config.headers\r\n  }).then(checkResponse);\r\n};\r\n\r\nexport const updateAvatar = (avatarUrl) => {\r\n  return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n    method: 'PATCH',\r\n    headers: config.headers,\r\n    body: JSON.stringify({ avatar: avatarUrl })\r\n  }).then(checkResponse);\r\n};\r\n */\r\n\r\n\r\nconst config = {\r\n  baseUrl: 'https://nomoreparties.co/v1/wff-cohort-38',\r\n  headers: {\r\n    authorization: '876e3de4-4442-4286-83e5-5c1ffc2cb0cf',\r\n    'Content-Type': 'application/json'\r\n  }\r\n};\r\n\r\n// Проверка ответа сервера\r\nconst checkResponse = (res) => {\r\n  if (res.ok) {\r\n    return res.json();\r\n  }\r\n  return Promise.reject(`Ошибка: ${res.status}`);\r\n};\r\n\r\n// Получить данные пользователя\r\nexport const getUserInfo = () => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    headers: config.headers\r\n  }).then(checkResponse);\r\n};\r\n\r\n// Обновить данные профиля\r\nexport const updateUserInfo = (name, about) => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    method: 'PATCH',\r\n    headers: config.headers,\r\n    body: JSON.stringify({ name, about })\r\n  }).then(checkResponse);\r\n};\r\n\r\n// Обновить аватар\r\nexport const updateAvatar = (avatarLink) => {\r\n  return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n    method: 'PATCH',\r\n    headers: config.headers,\r\n    body: JSON.stringify({ avatar: avatarLink })\r\n  }).then(checkResponse);\r\n};\r\n\r\n// Получить карточки\r\nexport const getInitialCards = () => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    headers: config.headers\r\n  }).then(checkResponse);\r\n};\r\n\r\n// Добавить новую карточку\r\nexport const addCard = (name, link) => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    method: 'POST',\r\n    headers: config.headers,\r\n    body: JSON.stringify({ name, link })\r\n  }).then(checkResponse);\r\n};\r\n\r\n// Удалить карточку\r\nexport const deleteCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/${cardId}`, {\r\n    method: 'DELETE',\r\n    headers: config.headers\r\n  }).then(checkResponse);\r\n};\r\n\r\n// Поставить лайк\r\nexport const likeCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: 'PUT',\r\n    headers: config.headers\r\n  }).then(checkResponse);\r\n};\r\n\r\n// Удалить лайк\r\nexport const unlikeCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: 'DELETE',\r\n    headers: config.headers\r\n  }).then(checkResponse);\r\n};\r\n\r\n","// validation.js\r\n\r\n/* function showInputError(formElement, inputElement, errorMessage, config) {\r\n  const errorElement = formElement.querySelector(`#${inputElement.id}-error`);\r\n  inputElement.classList.add(config.inputErrorClass);\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add(config.errorClass);\r\n}\r\n\r\nfunction hideInputError(formElement, inputElement, config) {\r\n  const errorElement = formElement.querySelector(`#${inputElement.id}-error`);\r\n  inputElement.classList.remove(config.inputErrorClass);\r\n  errorElement.textContent = '';\r\n  errorElement.classList.remove(config.errorClass);\r\n}\r\n\r\nfunction checkInputValidity(formElement, inputElement, config) {\r\n  const pattern = /^[a-zA-Zа-яА-ЯёЁ\\s-]+$/;\r\n\r\n  if (inputElement.validity.patternMismatch) {\r\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n  } else {\r\n    inputElement.setCustomValidity('');\r\n  }\r\n\r\n  if (!inputElement.validity.valid) {\r\n    showInputError(formElement, inputElement, inputElement.validationMessage, config);\r\n  } else {\r\n    hideInputError(formElement, inputElement, config);\r\n  }\r\n}\r\n\r\nfunction hasInvalidInput(inputList) {\r\n  return inputList.some(inputElement => !inputElement.validity.valid);\r\n}\r\n\r\nfunction toggleButtonState(inputList, buttonElement, config) {\r\n  if (hasInvalidInput(inputList)) {\r\n    buttonElement.classList.add(config.inactiveButtonClass);\r\n    buttonElement.disabled = true;\r\n  } else {\r\n    buttonElement.classList.remove(config.inactiveButtonClass);\r\n    buttonElement.disabled = false;\r\n  }\r\n}\r\n\r\nfunction setEventListeners(formElement, config) {\r\n  const inputList = Array.from(formElement.querySelectorAll(config.inputSelector));\r\n  const buttonElement = formElement.querySelector(config.submitButtonSelector);\r\n\r\n  toggleButtonState(inputList, buttonElement, config);\r\n\r\n  inputList.forEach(inputElement => {\r\n    inputElement.addEventListener('input', () => {\r\n      checkInputValidity(formElement, inputElement, config);\r\n      toggleButtonState(inputList, buttonElement, config);\r\n    });\r\n  });\r\n}\r\n\r\nexport function enableValidation(config) {\r\n  const formList = Array.from(document.querySelectorAll(config.formSelector));\r\n  formList.forEach(formElement => {\r\n    setEventListeners(formElement, config);\r\n  });\r\n}\r\n\r\nexport function clearValidation(formElement, config) {\r\n  const inputList = Array.from(formElement.querySelectorAll(config.inputSelector));\r\n  const buttonElement = formElement.querySelector(config.submitButtonSelector);\r\n\r\n  inputList.forEach(inputElement => {\r\n    hideInputError(formElement, inputElement, config);\r\n  });\r\n\r\n  toggleButtonState(inputList, buttonElement, config);\r\n}\r\n */\r\n\r\n\r\n// validation.js\r\n\r\n// validation.js\r\n\r\n// Функция показа ошибки\r\nfunction showInputError(formElement, inputElement, errorMessage, settings) {\r\n  const errorElement = formElement.querySelector(`#${inputElement.id}-error`);\r\n  inputElement.classList.add(settings.inputErrorClass);\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add(settings.errorClass);\r\n}\r\n\r\n// Функция скрытия ошибки\r\nfunction hideInputError(formElement, inputElement, settings) {\r\n  const errorElement = formElement.querySelector(`#${inputElement.id}-error`);\r\n  inputElement.classList.remove(settings.inputErrorClass);\r\n  errorElement.textContent = '';\r\n  errorElement.classList.remove(settings.errorClass);\r\n}\r\n\r\n// Проверка валидности\r\nfunction checkInputValidity(formElement, inputElement, settings) {\r\n  if (!inputElement.validity.valid) {\r\n    showInputError(formElement, inputElement, inputElement.validationMessage, settings);\r\n  } else {\r\n    hideInputError(formElement, inputElement, settings);\r\n  }\r\n}\r\n\r\n// Проверка всех полей формы на валидность\r\nfunction hasInvalidInput(inputList) {\r\n  return inputList.some((inputElement) => !inputElement.validity.valid);\r\n}\r\n\r\n// Переключение состояния кнопки\r\nfunction toggleButtonState(inputList, buttonElement, settings) {\r\n  if (hasInvalidInput(inputList)) {\r\n    buttonElement.classList.add(settings.inactiveButtonClass);\r\n    buttonElement.disabled = true;\r\n  } else {\r\n    buttonElement.classList.remove(settings.inactiveButtonClass);\r\n    buttonElement.disabled = false;\r\n  }\r\n}\r\n\r\n// Назначение слушателей формам\r\nfunction setEventListeners(formElement, settings) {\r\n  const inputList = Array.from(formElement.querySelectorAll(settings.inputSelector));\r\n  const buttonElement = formElement.querySelector(settings.submitButtonSelector);\r\n\r\n  toggleButtonState(inputList, buttonElement, settings);\r\n\r\n  inputList.forEach((inputElement) => {\r\n    inputElement.addEventListener('input', () => {\r\n      checkInputValidity(formElement, inputElement, settings);\r\n      toggleButtonState(inputList, buttonElement, settings);\r\n    });\r\n  });\r\n}\r\n\r\n// Включение валидации\r\nexport function enableValidation(settings) {\r\n  const formList = Array.from(document.querySelectorAll(settings.formSelector));\r\n  formList.forEach((formElement) => {\r\n    setEventListeners(formElement, settings);\r\n  });\r\n}\r\n\r\n// Очистка ошибок и деактивация кнопки при повторном открытии попапа\r\nexport function clearValidation(formElement, settings) {\r\n  const inputList = Array.from(formElement.querySelectorAll(settings.inputSelector));\r\n  const buttonElement = formElement.querySelector(settings.submitButtonSelector);\r\n\r\n  inputList.forEach((inputElement) => {\r\n    hideInputError(formElement, inputElement, settings);\r\n  });\r\n\r\n  toggleButtonState(inputList, buttonElement, settings);\r\n}\r\n","/* import './index.css';\r\nimport { initialCards } from './scripts/cards.js';\r\nimport { createCard, cardDelete, handleLike } from './scripts/card.js';\r\nimport { openModal, closeModal } from './scripts/modal.js';\r\nimport { enableValidation, clearValidation } from './scripts/validation.js';\r\n\r\n// профиль\r\nconst profileTitle = document.querySelector('.profile__title');\r\nconst profileDescription = document.querySelector('.profile__description');\r\n\r\n// кнопки\r\nconst profileEditBtn = document.querySelector('.profile__edit-button');\r\nconst addCardBtn = document.querySelector('.profile__add-button');\r\n\r\n// попапы\r\nconst popupEdit = document.querySelector('.popup_type_edit');\r\nconst popupNewCard = document.querySelector('.popup_type_new-card');\r\nconst popupTypeImage = document.querySelector('.popup_type_image');\r\n\r\n// формы\r\nconst profileFormElement = popupEdit.querySelector('.popup__form');\r\nconst nameInput = profileFormElement.querySelector('.popup__input_type_name');\r\nconst jobInput = profileFormElement.querySelector('.popup__input_type_description');\r\n\r\nconst addCardForm = popupNewCard.querySelector('.popup__form');\r\nconst cardNameInput = addCardForm.querySelector('.popup__input_type_card-name');\r\nconst cardLinkInput = addCardForm.querySelector('.popup__input_type_url');\r\n\r\n// просмотр изображения\r\nconst popupImage = popupTypeImage.querySelector('.popup__image');\r\nconst popupCaption = popupTypeImage.querySelector('.popup__caption');\r\n\r\n// Список карточек\r\nconst placesList = document.querySelector('.places__list');\r\n\r\n// Открытие полноэкранного изображения\r\nconst ImageClick = (cardData) => {\r\n  popupImage.src = cardData.link;\r\n  popupImage.alt = cardData.name;\r\n  popupCaption.textContent = cardData.name;\r\n  openModal(popupTypeImage);\r\n};\r\n\r\n// Создание карточки\r\nfunction renderCard(cardData) {\r\n  const card = createCard(cardData, {\r\n    cardDelete,\r\n    handleLike,\r\n    ImageClick\r\n  });\r\n  placesList.append(card);\r\n}\r\n\r\n// Инициализация стартовых карточек\r\ninitialCards.forEach(renderCard);\r\n\r\n// Открытие попапа редактирования профиля\r\nprofileEditBtn.addEventListener('click', () => {\r\n  nameInput.value = profileTitle.textContent;\r\n  jobInput.value = profileDescription.textContent;\r\n  clearValidation(profileFormElement, validationConfig);\r\n  openModal(popupEdit);\r\n});\r\n\r\n// Обработка формы редактирования профиля\r\nfunction handleProfileFormSubmit(evt) {\r\n  evt.preventDefault();\r\n  profileTitle.textContent = nameInput.value;\r\n  profileDescription.textContent = jobInput.value;\r\n  closeModal(popupEdit);\r\n}\r\nprofileFormElement.addEventListener('submit', handleProfileFormSubmit);\r\n\r\n// Открытие попапа добавления карточки\r\naddCardBtn.addEventListener('click', () => {\r\n  addCardForm.reset();\r\n  clearValidation(addCardForm, validationConfig);\r\n  openModal(popupNewCard);\r\n});\r\n\r\n// Добавление карточки\r\nfunction handleAddCardSubmit(evt) {\r\n  evt.preventDefault();\r\n\r\n  const newCardData = {\r\n    name: cardNameInput.value,\r\n    link: cardLinkInput.value\r\n  };\r\n\r\n  const newCard = createCard(newCardData, {\r\n    cardDelete,\r\n    handleLike,\r\n    ImageClick\r\n  });\r\n\r\n  placesList.prepend(newCard);\r\n  addCardForm.reset();\r\n  closeModal(popupNewCard);\r\n}\r\naddCardForm.addEventListener('submit', handleAddCardSubmit);\r\n\r\n// Закрытие попапов\r\nconst modals = document.querySelectorAll('.popup');\r\nmodals.forEach((modal) => {\r\n  modal.addEventListener('click', (event) => {\r\n    if (\r\n      event.target.classList.contains('popup') ||\r\n      event.target.classList.contains('popup__close')\r\n    ) {\r\n      closeModal(modal);\r\n    }\r\n  });\r\n});\r\n\r\n// Конфигурация валидации\r\nconst validationConfig = {\r\n  formSelector: '.popup__form',\r\n  inputSelector: '.popup__input',\r\n  submitButtonSelector: '.popup__button',\r\n  inactiveButtonClass: 'popup__button_disabled',\r\n  inputErrorClass: 'popup__input_type_error',\r\n  errorClass: 'popup__error_visible'\r\n};\r\n\r\n// Включение валидации\r\nenableValidation(validationConfig);\r\n */\r\n\r\n\r\n////////////////////////////////////////\r\n\r\n\r\n// index.js\r\n\r\nimport './index.css';\r\nimport {createCard as createCard} from './scripts/cards.js';\r\nimport {\r\n  openModal,\r\n  closeModal,\r\n  setModalEventListeners\r\n} from './scripts/modal.js';\r\nimport {\r\n  getInitialCards,\r\n  getUserInfo,\r\n  updateUserInfo,\r\n  postNewCard,\r\n  deleteCard,\r\n  likeCard,\r\n  unlikeCard,\r\n  updateAvatar\r\n} from './scripts/api.js';\r\nimport { enableValidation, clearValidation } from './scripts/validation.js';\r\n\r\n// DOM элементы\r\nconst profileEditButton = document.querySelector('.profile__edit-button');\r\nconst profileAddButton = document.querySelector('.profile__add-button');\r\nconst profileAvatar = document.querySelector('.profile__image');\r\nconst profileName = document.querySelector('.profile__title');\r\nconst profileDescription = document.querySelector('.profile__description');\r\n\r\nconst popupProfile = document.querySelector('.popup_type_edit');\r\nconst popupCard = document.querySelector('.popup_type_new-card');\r\nconst popupAvatar = document.querySelector('.popup_type_update-avatar');\r\n\r\nconst formProfile = popupProfile.querySelector('.popup__form');\r\nconst nameInput = formProfile.querySelector('.popup__input_type_name');\r\nconst descriptionInput = formProfile.querySelector('.popup__input_type_description');\r\n\r\nconst formCard = popupCard.querySelector('.popup__form');\r\nconst cardNameInput = formCard.querySelector('.popup__input_type_card-name');\r\nconst cardLinkInput = formCard.querySelector('.popup__input_type_url');\r\n\r\nconst formAvatar = popupAvatar.querySelector('.popup__form');\r\nconst avatarLinkInput = formAvatar.querySelector('.popup__input_type_avatar-url');\r\n\r\nconst cardContainer = document.querySelector('.places__list');\r\n\r\nlet userId = '';\r\n\r\n// Отображение карточек и профиля\r\nPromise.all([getInitialCards(), getUserInfo()])\r\n  .then(([cards, userData]) => {\r\n    userId = userData._id;\r\n    profileName.textContent = userData.name;\r\n    profileDescription.textContent = userData.about;\r\n    profileAvatar.style.backgroundImage = `url(${userData.avatar})`;\r\n\r\n    cards.reverse().forEach(card => {\r\n      const cardElement = createCard(card, {\r\n        userId,\r\n        handleImageClick: (cardData) => openModal(document.querySelector('.popup_type_image'), cardData),\r\n        handleDeleteClick: (cardId, cardElement) => {\r\n          deleteCard(cardId)\r\n            .then(() => cardElement.remove())\r\n            .catch(console.log);\r\n        },\r\n        handleLikeClick: (cardId, isLiked, updateLikesUI) => {\r\n          const likeAction = isLiked ? unlikeCard : likeCard;\r\n          likeAction(cardId)\r\n            .then(updatedCard => updateLikesUI(updatedCard.likes))\r\n            .catch(console.log);\r\n        }\r\n      });\r\n      cardContainer.append(cardElement);\r\n    });\r\n  })\r\n  .catch(console.log);\r\n\r\n// Открытие форм\r\nprofileEditButton.addEventListener('click', () => {\r\n  nameInput.value = profileName.textContent;\r\n  descriptionInput.value = profileDescription.textContent;\r\n  clearValidation(formProfile);\r\n  openModal(popupProfile);\r\n});\r\n\r\nprofileAddButton.addEventListener('click', () => {\r\n  formCard.reset();\r\n  clearValidation(formCard);\r\n  openModal(popupCard);\r\n});\r\n\r\nprofileAvatar.addEventListener('click', () => {\r\n  formAvatar.reset();\r\n  clearValidation(formAvatar);\r\n  openModal(popupAvatar);\r\n});\r\n\r\n// Обработка форм\r\nformProfile.addEventListener('submit', (evt) => {\r\n  evt.preventDefault();\r\n  const submitButton = formProfile.querySelector('.popup__button');\r\n  const originalText = submitButton.textContent;\r\n  submitButton.textContent = 'Сохранение...';\r\n  updateUserInfo({ name: nameInput.value, about: descriptionInput.value })\r\n    .then(data => {\r\n      profileName.textContent = data.name;\r\n      profileDescription.textContent = data.about;\r\n      closeModal(popupProfile);\r\n    })\r\n    .catch(console.log)\r\n    .finally(() => submitButton.textContent = originalText);\r\n});\r\n\r\nformCard.addEventListener('submit', (evt) => {\r\n  evt.preventDefault();\r\n  const submitButton = formCard.querySelector('.popup__button');\r\n  const originalText = submitButton.textContent;\r\n  submitButton.textContent = 'Сохранение...';\r\n  postNewCard({ name: cardNameInput.value, link: cardLinkInput.value })\r\n    .then(card => {\r\n      const newCard = createCard(card, {\r\n        userId,\r\n        handleImageClick: (cardData) => openModal(document.querySelector('.popup_type_image'), cardData),\r\n        handleDeleteClick: (cardId, cardElement) => {\r\n          deleteCard(cardId)\r\n            .then(() => cardElement.remove())\r\n            .catch(console.log);\r\n        },\r\n        handleLikeClick: (cardId, isLiked, updateLikesUI) => {\r\n          const likeAction = isLiked ? unlikeCard : likeCard;\r\n          likeAction(cardId)\r\n            .then(updatedCard => updateLikesUI(updatedCard.likes))\r\n            .catch(console.log);\r\n        }\r\n      });\r\n      cardContainer.prepend(newCard);\r\n      closeModal(popupCard);\r\n      formCard.reset();\r\n    })\r\n    .catch(console.log)\r\n    .finally(() => submitButton.textContent = originalText);\r\n});\r\n\r\nformAvatar.addEventListener('submit', (evt) => {\r\n  evt.preventDefault();\r\n  const submitButton = formAvatar.querySelector('.popup__button');\r\n  const originalText = submitButton.textContent;\r\n  submitButton.textContent = 'Сохранение...';\r\n  updateAvatar({ avatar: avatarLinkInput.value })\r\n    .then(data => {\r\n      profileAvatar.style.backgroundImage = `url(${data.avatar})`;\r\n      closeModal(popupAvatar);\r\n    })\r\n    .catch(console.log)\r\n    .finally(() => submitButton.textContent = originalText);\r\n});\r\n\r\n// Запуск валидации и установка слушателей\r\nenableValidation({\r\n  formSelector: '.popup__form',\r\n  inputSelector: '.popup__input',\r\n  submitButtonSelector: '.popup__button',\r\n  inactiveButtonClass: 'popup__button_disabled',\r\n  inputErrorClass: 'popup__input_type_error',\r\n  errorClass: 'popup__error_visible'\r\n});\r\n\r\nsetModalEventListeners();\r\n\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","popupOpenedClass","popupTransitionClass","openModal","popup","classList","add","setTimeout","document","addEventListener","handleEscClose","closeModal","remove","removeEventListener","evt","openedPopup","querySelector","concat","config","baseUrl","headers","authorization","checkResponse","res","ok","json","Promise","reject","status","getUserInfo","fetch","then","updateUserInfo","name","about","method","body","JSON","stringify","updateAvatar","avatarLink","avatar","getInitialCards","deleteCard","cardId","likeCard","unlikeCard","hideInputError","formElement","inputElement","settings","errorElement","id","inputErrorClass","textContent","errorClass","toggleButtonState","inputList","buttonElement","some","validity","valid","hasInvalidInput","inactiveButtonClass","disabled","clearValidation","Array","from","querySelectorAll","inputSelector","submitButtonSelector","forEach","profileEditButton","profileAddButton","profileAvatar","profileName","profileDescription","popupProfile","popupCard","popupAvatar","formProfile","nameInput","descriptionInput","formCard","cardNameInput","cardLinkInput","formAvatar","avatarLinkInput","cardContainer","userId","all","_ref","_ref2","cards","userData","_id","style","backgroundImage","reverse","card","cardElement","createCard","handleImageClick","cardData","handleDeleteClick","catch","console","log","handleLikeClick","isLiked","updateLikesUI","updatedCard","likes","append","reset","preventDefault","submitButton","originalText","data","finally","postNewCard","link","newCard","prepend","formSelector","errorMessage","showInputError","validationMessage","checkInputValidity","setEventListeners","setModalEventListeners"],"sourceRoot":""}